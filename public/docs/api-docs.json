{
  "swagger": "2.0",
  "info": {
    "description": "Penjualanapp API",
    "version": "1.0.0",
    "title": "Penjualanapp API",
    "contact": {
      "name": "PenjualanAPP",
      "url": "https://penjualanapp-api.herokuapp.com"
    },
    "license": {
      "name": "MIT License",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "host": "localhost:8000",
  "basePath": "/api/v1",
  "schemes": [
    "http",
    "https"
  ],
  "produces": [
    "application/json"
  ],
  "consumes": [
    "application/json"
  ],
  "securityDefinitions": {
    "Bearer": {
      "description": "For accessing the protected API resources, you must have received a a valid JWT token after registering or logging in. This JWT token must then be used for all protected resources by passing it in via the 'Authorization' header.\n\nA JWT token is generated by the API by either registering via /users or logging in via /users/login.\n\nThe following format must be in the 'Authorization' header :\n\n    Token:  Bearer <token>\n    \n",
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "paths": {
    "/auth/login": {
      "post": {
        "summary": "Existing user login",
        "description": "Login for existing user",
        "tags": [
          "User and Authentication"
        ],
        "operationId": "Login",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Credentials to use",
            "schema": {
              "$ref": "#/definitions/LoginUserRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/GenericErrorModel"
            }
          }
        }
      }
    },
    "/auth/register": {
      "post": {
        "summary": "Register a new user",
        "description": "Register a new user",
        "tags": [
          "User and Authentication"
        ],
        "operationId": "CreateUser",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Details of the new user to register",
            "schema": {
              "$ref": "#/definitions/NewUserRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserRegisterResponse"
            }
          },
          "422": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/GenericErrorModel"
            }
          }
        }
      }
    },
    "/account/profile": {
      "get": {
        "summary": "Get current user",
        "description": "Gets the currently logged-in user",
        "tags": [
          "User and Authentication"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "operationId": "GetCurrentUser",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ProfileResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/GenericErrorModel"
            }
          }
        }
      },
      "patch": {
        "summary": "Update current user",
        "description": "Updated user information for current user",
        "tags": [
          "User and Authentication"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "operationId": "UpdateCurrentUser",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "User details to update. At least **one** field is required.",
            "schema": {
              "$ref": "#/definitions/UpdateUserRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ProfileUpdateResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/GenericErrorModel"
            }
          }
        }
      }
    },
    "/account/updatepassword": {
      "patch": {
        "summary": "Update Password current user",
        "description": "Updated user information for current user",
        "tags": [
          "User and Authentication"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "operationId": "UpdatePasswordCurrentUser",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "User details to update password.",
            "schema": {
              "$ref": "#/definitions/UpdatePassUserRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ProfileUpdateResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/GenericErrorModel"
            }
          }
        }
      }
    },
    "/account/uploadphoto": {
      "post": {
        "summary": "Upload photo current user",
        "description": "upload user photo profile for current user",
        "tags": [
          "User and Authentication"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "operationId": "UploadPhotoCurrentUser",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "photo",
            "type": "file",
            "description": "The file to upload."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PhotoResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/GenericErrorModel"
            }
          }
        }
      }
    },
    "/products": {
      "get": {
        "summary": "Get all product",
        "description": "Get products from users",
        "tags": [
          "Product and Category"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "operationId": "GetProduct",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ProductResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/GenericErrorModel"
            }
          }
        }
      },
      "post": {
        "summary": "Create an product",
        "description": "Create an product",
        "tags": [
          "Product and Category"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "operationId": "CreateProduct",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Product to create",
            "schema": {
              "$ref": "#/definitions/NewProductRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/CreateProductResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/GenericErrorModel"
            }
          }
        }
      }
    },
    "/products/{product}": {
      "get": {
        "summary": "Get detail of product",
        "description": "Get detail product from users",
        "tags": [
          "Product and Category"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "operationId": "GetDetailProduct",
        "parameters": [
          {
            "name": "product",
            "in": "path",
            "description": "Product code of the product to get",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ProductDetailResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/GenericErrorModel"
            }
          }
        }
      },
      "patch": {
        "summary": "Update an product",
        "description": "Update an product",
        "tags": [
          "Product and Category"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "operationId": "UpdateProduct",
        "parameters": [
          {
            "name": "product",
            "in": "path",
            "required": true,
            "description": "product code of the product to update",
            "type": "string"
          },
          {
            "name": "products",
            "in": "body",
            "required": true,
            "description": "product ot update",
            "schema": {
              "$ref": "#/definitions/UpdateProductRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UpdateProductResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/GenericErrorModel"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete an product",
        "description": "Delete an product. . Auth is required",
        "tags": [
          "Product and Category"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "operationId": "DeleteProduct",
        "parameters": [
          {
            "name": "product",
            "in": "path",
            "required": true,
            "description": "Product code of the product to delete",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DeleteResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/GenericErrorModel"
            }
          }
        }
      }
    },
    "/search": {
      "get": {
        "summary": "Get data product by param",
        "description": "Get spesific data product by parameter from user",
        "tags": [
          "Product and Category"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "operationId": "GetDataProduct",
        "parameters": [
          {
            "name": "product",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SearchDataResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/GenericErrorModel"
            }
          }
        }
      }
    },
    "/category": {
      "get": {
        "summary": "Get all category",
        "description": "Get categories",
        "tags": [
          "Product and Category"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "operationId": "GetCategory",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CategoryResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/GenericErrorModel"
            }
          }
        }
      },
      "post": {
        "summary": "Create an category",
        "description": "Create an category",
        "tags": [
          "Product and Category"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "operationId": "CreateCategory",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Category to create",
            "schema": {
              "$ref": "#/definitions/NewCategoryRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/CreateCategoryResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/GenericErrorModel"
            }
          }
        }
      }
    },
    "/category/{category}": {
      "delete": {
        "summary": "Delete an category",
        "description": "Delete an category. . Auth is required",
        "tags": [
          "Product and Category"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "operationId": "DeleteCategory",
        "parameters": [
          {
            "name": "category",
            "in": "path",
            "required": true,
            "description": "Category id of the category to delete",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DeleteResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/GenericErrorModel"
            }
          }
        }
      }
    },
    "/customers": {
      "get": {
        "summary": "Get all customer",
        "description": "Get Customers",
        "tags": [
          "Customer"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "operationId": "GetCustomer",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CustomerResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/GenericErrorModel"
            }
          }
        }
      },
      "post": {
        "summary": "Create an customer",
        "description": "Create an customer",
        "tags": [
          "Customer"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "operationId": "CreateCustomer",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Customer to create",
            "schema": {
              "$ref": "#/definitions/NewCustomerRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/CreateCustomerResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/GenericErrorModel"
            }
          }
        }
      }
    },
    "/customers/{customer}": {
      "get": {
        "summary": "Get detail of customer",
        "description": "Get detail customer from users",
        "tags": [
          "Customer"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "operationId": "GetDetailCustomer",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "Customer id of the customer to get",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CustomerDetailResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/GenericErrorModel"
            }
          }
        }
      },
      "patch": {
        "summary": "Update an customer",
        "description": "Update an customer",
        "tags": [
          "Customer"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "operationId": "UpdateCustomer",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "required": true,
            "description": "customer id of the customer to update",
            "type": "string"
          },
          {
            "name": "customers",
            "in": "body",
            "required": true,
            "description": "customer ot update",
            "schema": {
              "$ref": "#/definitions/UpdateCustomerRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UpdateCustomerResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/GenericErrorModel"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete an customer",
        "description": "Delete an customer. . Auth is required",
        "tags": [
          "Customer"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "operationId": "DeleteCustomer",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "required": true,
            "description": "Customer id of the customer to delete",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DeleteResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/GenericErrorModel"
            }
          }
        }
      }
    },
    "/suppliers": {
      "get": {
        "summary": "Get all supplier",
        "description": "Get suppliers",
        "tags": [
          "Supplier"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "operationId": "GetSupplier",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SupplierResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/GenericErrorModel"
            }
          }
        }
      },
      "post": {
        "summary": "Create an supplier",
        "description": "Create an supplier",
        "tags": [
          "Supplier"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "operationId": "CreateSupplier",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Supplier to create",
            "schema": {
              "$ref": "#/definitions/NewSupplierRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/CreateSupplierResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/GenericErrorModel"
            }
          }
        }
      }
    },
    "/suppliers/{supplier}": {
      "get": {
        "summary": "Get detail of supplier",
        "description": "Get detail supplier from users",
        "tags": [
          "Supplier"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "operationId": "GetDetailSupplier",
        "parameters": [
          {
            "name": "supplier",
            "in": "path",
            "description": "Supplier id of the supplier to get",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SupplierDetailResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/GenericErrorModel"
            }
          }
        }
      },
      "patch": {
        "summary": "Update an supplier",
        "description": "Update an supplier",
        "tags": [
          "Supplier"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "operationId": "UpdateSupplier",
        "parameters": [
          {
            "name": "supplier",
            "in": "path",
            "required": true,
            "description": "supplier id of the supplier to update",
            "type": "string"
          },
          {
            "name": "suppliers",
            "in": "body",
            "required": true,
            "description": "supplier to update",
            "schema": {
              "$ref": "#/definitions/UpdateSupplierRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UpdateSupplierResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/GenericErrorModel"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete an supplier",
        "description": "Delete an supplier. . Auth is required",
        "tags": [
          "Supplier"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "operationId": "DeleteSupplier",
        "parameters": [
          {
            "name": "supplier",
            "in": "path",
            "required": true,
            "description": "Supplier id of the supplier to delete",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DeleteResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/GenericErrorModel"
            }
          }
        }
      }
    },
    "/purchases": {
      "get": {
        "summary": "Get all purchase",
        "description": "Get purchases",
        "tags": [
          "Purchase"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "operationId": "GetPurchase",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PurchaseResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/GenericErrorModel"
            }
          }
        }
      },
      "post": {
        "summary": "Create an purchase",
        "description": "Create an purchase",
        "tags": [
          "Purchase"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "operationId": "CreatePurchase",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Purchase to create",
            "schema": {
              "$ref": "#/definitions/NewPurchaseRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/CreatePurchaseResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/GenericErrorModel"
            }
          }
        }
      }
    },
    "/purchases/{purchase}": {
      "get": {
        "summary": "Get detail of purchase",
        "description": "Get detail purchase from users",
        "tags": [
          "Purchase"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "operationId": "GetDetailPurchase",
        "parameters": [
          {
            "name": "purchase",
            "in": "path",
            "description": "Purchase id of the purchase to get",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PurchaseDetailResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/GenericErrorModel"
            }
          }
        }
      }
    },
    "/sales": {
      "get": {
        "summary": "Get all sales",
        "description": "Get sales",
        "tags": [
          "Sales"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "operationId": "GetSales",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SalesResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/GenericErrorModel"
            }
          }
        }
      },
      "post": {
        "summary": "Create an sales",
        "description": "Create an sales",
        "tags": [
          "Sales"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "operationId": "CreateSales",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Sales to create",
            "schema": {
              "$ref": "#/definitions/NewSalesRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/CreateSalesResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/GenericErrorModel"
            }
          }
        }
      }
    },
    "/sales/{sale}": {
      "get": {
        "summary": "Get detail of sales",
        "description": "Get detail sales from users",
        "tags": [
          "Sales"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "operationId": "GetDetailSales",
        "parameters": [
          {
            "name": "sale",
            "in": "path",
            "description": "Sales id of the sales to get",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SalesDetailResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/GenericErrorModel"
            }
          }
        }
      }
    },
    "/purchasereport/daily": {
      "get": {
        "summary": "Get data report purchase by param",
        "description": "Get spesific data daily purchase by parameter from user",
        "tags": [
          "Report"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "operationId": "GetDataPurchaseDaily",
        "parameters": [
          {
            "name": "date",
            "in": "query",
            "description": "yyyy-mm-dd",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FilterPurchaseResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/GenericErrorModel"
            }
          }
        }
      }
    },
    "/purchasereport/monthly": {
      "get": {
        "summary": "Get data report purchase by param",
        "description": "Get spesific data monthly purchase by parameter from user",
        "tags": [
          "Report"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "operationId": "GetDataPurchaseMonthly",
        "parameters": [
          {
            "name": "month",
            "in": "query",
            "description": "mm",
            "required": false,
            "type": "string"
          },
          {
            "name": "year",
            "in": "query",
            "description": "yyyy",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FilterPurchaseResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/GenericErrorModel"
            }
          }
        }
      }
    },
    "/salesreport/daily": {
      "get": {
        "summary": "Get data report sales by param",
        "description": "Get spesific data daily sales by parameter from user",
        "tags": [
          "Report"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "operationId": "GetDataSalesDaily",
        "parameters": [
          {
            "name": "date",
            "in": "query",
            "description": "yyyy-mm-dd",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FilterSalesResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/GenericErrorModel"
            }
          }
        }
      }
    },
    "/salesreport/monthly": {
      "get": {
        "summary": "Get data report sales by param",
        "description": "Get spesific data monthly sales by parameter from user",
        "tags": [
          "Report"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "operationId": "GetDataSalesMonthly",
        "parameters": [
          {
            "name": "month",
            "in": "query",
            "description": "mm",
            "required": false,
            "type": "string"
          },
          {
            "name": "year",
            "in": "query",
            "description": "yyyy",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FilterSalesResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/GenericErrorModel"
            }
          }
        }
      }
    },
    "/stockreport/daily": {
      "get": {
        "summary": "Get data report stock by param",
        "description": "Get spesific data daily stock by parameter from user",
        "tags": [
          "Report"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "operationId": "GetDataStockDaily",
        "parameters": [
          {
            "name": "date",
            "in": "query",
            "description": "yyyy-mm-dd",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FilterStockResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/GenericErrorModel"
            }
          }
        }
      }
    },
    "/stockreport/monthly": {
      "get": {
        "summary": "Get data report stock by param",
        "description": "Get spesific data monthly stock by parameter from user",
        "tags": [
          "Report"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "operationId": "GetDataStockMonthly",
        "parameters": [
          {
            "name": "month",
            "in": "query",
            "description": "mm",
            "required": false,
            "type": "string"
          },
          {
            "name": "year",
            "in": "query",
            "description": "yyyy",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FilterStockResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/GenericErrorModel"
            }
          }
        }
      }
    },
    "/mutationreport/daily": {
      "get": {
        "summary": "Get data report mutation by param",
        "description": "Get spesific data daily mutation by parameter from user",
        "tags": [
          "Report"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "operationId": "GetDataMutationDaily",
        "parameters": [
          {
            "name": "date",
            "in": "query",
            "description": "yyyy-mm-dd",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FilterMutationResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/GenericErrorModel"
            }
          }
        }
      }
    },
    "/mutationreport/monthly": {
      "get": {
        "summary": "Get data report mutation by param",
        "description": "Get spesific data monthly mutation by parameter from user",
        "tags": [
          "Report"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "operationId": "GetDataMutationMonthly",
        "parameters": [
          {
            "name": "month",
            "in": "query",
            "description": "mm",
            "required": false,
            "type": "string"
          },
          {
            "name": "year",
            "in": "query",
            "description": "yyyy",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FilterMutationResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/GenericErrorModel"
            }
          }
        }
      }
    },
    "/cities": {
      "get": {
        "summary": "Get all cities",
        "description": "Get cities",
        "tags": [
          "Cities"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "operationId": "GetCities",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CitiesResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/GenericErrorModel"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "LoginUser": {
      "properties": {
        "username": {
          "type": "string",
          "example": "user1"
        },
        "password": {
          "type": "string",
          "example": "secret",
          "format": "password"
        }
      },
      "required": [
        "username",
        "password"
      ]
    },
    "LoginUserRequest": {
      "$ref": "#/definitions/LoginUser"
    },
    "NewUser": {
      "properties": {
        "username": {
          "type": "string",
          "example": "demo"
        },
        "email": {
          "type": "string",
          "example": "demo@demo.com"
        },
        "password": {
          "type": "string",
          "example": "secret",
          "format": "password"
        }
      },
      "required": [
        "username",
        "email",
        "password"
      ]
    },
    "NewUserRequest": {
      "$ref": "#/definitions/NewUser"
    },
    "User": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string"
        },
        "user": {
          "type": "string"
        },
        "token_type": {
          "type": "string"
        },
        "data": {
          "type": "object",
          "properties": {
            "token": {
              "type": "string"
            }
          }
        }
      },
      "required": [
        "status",
        "user",
        "token_type",
        "data"
      ]
    },
    "UserResponse": {
      "$ref": "#/definitions/User"
    },
    "UserRegis": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "photo": {
          "type": "string"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "type": "integer"
        }
      }
    },
    "UserRegisterResponse": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/UserRegis"
        },
        "success": {
          "type": "boolean"
        },
        "token": {
          "type": "string"
        }
      },
      "required": [
        "user"
      ]
    },
    "UpdateUser": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "demonstration"
        },
        "username": {
          "type": "string",
          "example": "demo"
        },
        "address": {
          "type": "string",
          "example": "Jl. Example no 7 Tester"
        },
        "phone_number": {
          "type": "string",
          "example": "087871821277"
        }
      }
    },
    "UpdateUserRequest": {
      "$ref": "#/definitions/UpdateUser"
    },
    "UpdatePass": {
      "type": "object",
      "properties": {
        "old_password": {
          "type": "string",
          "example": "secret"
        },
        "new_password": {
          "type": "string",
          "example": 123456
        },
        "confirm_password": {
          "type": "string",
          "example": 123456
        }
      }
    },
    "UpdatePassUserRequest": {
      "$ref": "#/definitions/UpdatePass"
    },
    "ProfileUpdateResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean"
        },
        "data": {
          "$ref": "#/definitions/Profile"
        },
        "message": {
          "type": "string",
          "example": "Profile updated successfully."
        }
      }
    },
    "PhotoResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "example": "photo uploaded"
        },
        "status_code": {
          "type": "integer",
          "example": 200
        }
      }
    },
    "DeleteResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "integer",
          "example": 200
        },
        "message": {
          "type": "string"
        }
      }
    },
    "ProductDetailResponse": {
      "type": "object",
      "properties": {
        "product_code": {
          "type": "string",
          "example": "SM38128"
        },
        "product_name": {
          "type": "string",
          "example": "Samsung - Galaxy S9 64GB"
        },
        "total_stock": {
          "type": "integer",
          "example": 22
        },
        "buy_price": {
          "type": "string",
          "example": 6270000
        },
        "sell_price": {
          "type": "string",
          "example": 7979860
        },
        "unit": {
          "type": "string",
          "example": "dus"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        },
        "categories": {
          "type": "object",
          "properties": {
            "data": {
              "properties": {
                "category_id": {
                  "type": "integer",
                  "example": 5
                },
                "category_name": {
                  "type": "string",
                  "example": "Elektronik"
                }
              }
            }
          }
        }
      }
    },
    "SearchDataResponse": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/SearchProduct"
        }
      },
      "required": [
        "data"
      ]
    },
    "SearchProduct": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "product_code": {
            "type": "string"
          },
          "user_id": {
            "type": "integer"
          },
          "product_name": {
            "type": "string"
          },
          "category_id": {
            "type": "integer"
          },
          "first_stock": {
            "type": "integer"
          },
          "total_stock": {
            "type": "integer"
          },
          "buy_price": {
            "type": "string"
          },
          "sell_price": {
            "type": "string"
          },
          "unit": {
            "type": "string"
          },
          "stock_in": {
            "type": "integer"
          },
          "stock_out": {
            "type": "integer"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      }
    },
    "NewCategoryRequest": {
      "properties": {
        "category_name": {
          "type": "string",
          "example": "Sepatu"
        }
      }
    },
    "CreateCategoryResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean"
        },
        "data": {
          "type": "object",
          "properties": {
            "category_name": {
              "type": "string"
            },
            "user_id": {
              "type": "integer"
            },
            "category_id": {
              "type": "integer"
            }
          }
        },
        "message": {
          "type": "string"
        }
      }
    },
    "NewProductRequest": {
      "properties": {
        "product_code": {
          "type": "string",
          "example": "HL8126"
        },
        "product_name": {
          "type": "string",
          "example": "Hilo Teen Chocolate 250gr"
        },
        "category_id": {
          "type": "integer",
          "example": 11
        },
        "first_stock": {
          "type": "integer",
          "example": 10
        },
        "buy_price": {
          "type": "string",
          "example": 37000
        },
        "sell_price": {
          "type": "integer",
          "example": 39700
        },
        "unit": {
          "type": "string",
          "example": "box"
        }
      },
      "required": [
        "product_code",
        "product_name",
        "category_id",
        "first_stock",
        "buy_price",
        "sell_price",
        "unit"
      ]
    },
    "UpdateProductRequest": {
      "properties": {
        "product_name": {
          "type": "string",
          "example": "Hilo Teen Chocolate 250gr"
        },
        "category_id": {
          "type": "integer",
          "example": 11
        },
        "buy_price": {
          "type": "string",
          "example": 36000
        },
        "sell_price": {
          "type": "integer",
          "example": 38700
        },
        "unit": {
          "type": "string",
          "example": "box"
        }
      },
      "required": [
        "product_name",
        "category_id",
        "buy_price",
        "sell_price",
        "unit"
      ]
    },
    "CreateProductResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean"
        },
        "data": {
          "properties": {
            "product_code": {
              "type": "string"
            },
            "product_name": {
              "type": "string"
            },
            "category_id": {
              "type": "integer"
            },
            "first_stock": {
              "type": "integer"
            },
            "buy_price": {
              "type": "string"
            },
            "sell_price": {
              "type": "string"
            },
            "unit": {
              "type": "string"
            },
            "total_stock": {
              "type": "integer"
            },
            "user_id": {
              "type": "integer"
            },
            "created_at": {
              "type": "string",
              "format": "date-time"
            },
            "updated_at": {
              "type": "string",
              "format": "date-time"
            }
          }
        },
        "message": {
          "type": "string"
        }
      }
    },
    "UpdateProductResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean"
        },
        "data": {
          "$ref": "#/definitions/SearchProduct"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "ProductResponse": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/Products"
        },
        "meta": {
          "$ref": "#/definitions/Pagination"
        }
      },
      "required": [
        "data"
      ]
    },
    "Products": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "product_code": {
            "type": "string",
            "example": "SM38128"
          },
          "product_name": {
            "type": "string",
            "example": "Samsung - Galaxy S9 64GB"
          },
          "total_stock": {
            "type": "integer",
            "example": 22
          },
          "buy_price": {
            "type": "string",
            "example": 6270000
          },
          "sell_price": {
            "type": "string",
            "example": 7979860
          },
          "unit": {
            "type": "string",
            "example": "dus"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "categories": {
            "type": "object",
            "properties": {
              "data": {
                "properties": {
                  "category_id": {
                    "type": "integer",
                    "example": 5
                  },
                  "category_name": {
                    "type": "string",
                    "example": "Elektronik"
                  }
                }
              }
            }
          }
        }
      }
    },
    "CategoryResponse": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/Categories"
        },
        "meta": {
          "$ref": "#/definitions/Pagination"
        }
      },
      "required": [
        "data"
      ]
    },
    "Categories": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "category_id": {
            "type": "integer"
          },
          "category_name": {
            "type": "string"
          }
        }
      }
    },
    "CustomerDetailResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "object",
          "properties": {
            "customer_id": {
              "type": "integer"
            },
            "name": {
              "type": "string"
            },
            "address": {
              "type": "string"
            },
            "phone_number": {
              "type": "string"
            },
            "created_at": {
              "type": "string",
              "format": "date-time"
            },
            "updated_at": {
              "type": "string",
              "format": "date-time"
            },
            "cities": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "name": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "UpdateCustomerRequest": {
      "properties": {
        "name": {
          "type": "string",
          "example": "Zaid Tayo"
        },
        "address": {
          "type": "string",
          "example": "JL garuda 2 no 17"
        },
        "phone_number": {
          "type": "integer",
          "example": "08213126327"
        },
        "city_id": {
          "type": "integer",
          "example": 9
        }
      },
      "required": [
        "name",
        "address",
        "phone_number",
        "city_id"
      ]
    },
    "UpdateCustomerResponse": {
      "$ref": "#/definitions/CreateCustomerResponse"
    },
    "NewCustomerRequest": {
      "properties": {
        "name": {
          "type": "string",
          "example": "Zaid"
        },
        "address": {
          "type": "string",
          "example": "JL garuda 2"
        },
        "phone_number": {
          "type": "integer",
          "example": "08123621326"
        },
        "city_id": {
          "type": "integer",
          "example": 9
        }
      },
      "required": [
        "name",
        "address",
        "phone_number",
        "city_id"
      ]
    },
    "CreateCustomerResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean"
        },
        "data": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "address": {
              "type": "string"
            },
            "phone_number": {
              "type": "integer"
            },
            "city_id": {
              "type": "integer"
            },
            "user_id": {
              "type": "integer"
            },
            "updated_at": {
              "type": "string",
              "format": "date-time"
            },
            "created_at": {
              "type": "string",
              "format": "date-time"
            }
          }
        },
        "message": {
          "type": "string"
        }
      }
    },
    "CustomerResponse": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/Customers"
        },
        "meta": {
          "$ref": "#/definitions/Pagination"
        }
      },
      "required": [
        "data"
      ]
    },
    "Customers": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "customer_id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "address": {
            "type": "string"
          },
          "phone_number": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "cities": {
            "type": "object",
            "properties": {
              "data": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "integer"
                  },
                  "name": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "SupplierDetailResponse": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/Suppliers"
        }
      }
    },
    "UpdateSupplierRequest": {
      "properties": {
        "name": {
          "type": "string",
          "example": "Zuam"
        },
        "address": {
          "type": "string",
          "example": "JL Merak 2 No 118 Tawangsari"
        },
        "phone_number": {
          "type": "integer",
          "example": "089634509727"
        },
        "city_id": {
          "type": "integer",
          "example": 476
        }
      },
      "required": [
        "name",
        "address",
        "phone_number",
        "city_id"
      ]
    },
    "UpdateSupplierResponse": {
      "$ref": "#/definitions/CreateSupplierResponse"
    },
    "NewSupplierRequest": {
      "properties": {
        "name": {
          "type": "string",
          "example": "Zuamsyah"
        },
        "address": {
          "type": "string",
          "example": "JL Merak 2 No 118 Tawangsari"
        },
        "phone_number": {
          "type": "integer",
          "example": "0856127127"
        },
        "city_id": {
          "type": "integer",
          "example": 476
        }
      },
      "required": [
        "name",
        "address",
        "phone_number",
        "city_id"
      ]
    },
    "CreateSupplierResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean"
        },
        "data": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "address": {
              "type": "string"
            },
            "phone_number": {
              "type": "integer"
            },
            "city_id": {
              "type": "integer"
            },
            "user_id": {
              "type": "integer"
            },
            "updated_at": {
              "type": "string",
              "format": "date-time"
            },
            "created_at": {
              "type": "string",
              "format": "date-time"
            }
          }
        },
        "message": {
          "type": "string"
        }
      }
    },
    "SupplierResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Suppliers"
          }
        },
        "meta": {
          "$ref": "#/definitions/Pagination"
        }
      },
      "required": [
        "data"
      ]
    },
    "Suppliers": {
      "type": "object",
      "properties": {
        "supplier_id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "address": {
          "type": "string"
        },
        "phone_number": {
          "type": "string"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        },
        "cities": {
          "type": "object",
          "properties": {
            "data": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer"
                },
                "name": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "CreatePurchaseResponse": {
      "properties": {
        "success": {
          "type": "boolean"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Purchases"
          }
        },
        "message": {
          "type": "string"
        }
      }
    },
    "NewPurchaseRequest": {
      "properties": {
        "supplier_id": {
          "type": "integer",
          "example": 1
        },
        "product_code": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "AR91237",
            "AP91222",
            "SM38128"
          ]
        },
        "product_amount": {
          "type": "array",
          "items": {
            "type": "integer"
          },
          "example": [
            2,
            5,
            7
          ]
        }
      }
    },
    "PurchaseDetailResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Purchases"
          }
        }
      }
    },
    "PurchaseResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Purchases"
          }
        },
        "message": {
          "type": "string"
        }
      }
    },
    "Purchases": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "order_id": {
          "type": "integer"
        },
        "product_code": {
          "type": "string"
        },
        "user_id": {
          "type": "integer"
        },
        "product_amount": {
          "type": "integer"
        },
        "buy_price": {
          "type": "integer"
        },
        "subtotal_price": {
          "type": "string"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "CreateSalesResponse": {
      "properties": {
        "success": {
          "type": "boolean"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Sales"
          }
        },
        "message": {
          "type": "string"
        }
      }
    },
    "NewSalesRequest": {
      "properties": {
        "customer_id": {
          "type": "integer",
          "example": 1
        },
        "product_code": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "AR91237",
            "AP91222",
            "SM38128"
          ]
        },
        "product_amount": {
          "type": "array",
          "items": {
            "type": "integer"
          },
          "example": [
            2,
            1,
            5
          ]
        }
      }
    },
    "SalesDetailResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Sales"
          }
        }
      }
    },
    "SalesResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Sales"
          }
        },
        "message": {
          "type": "string"
        }
      }
    },
    "Sales": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "sales_id": {
          "type": "integer"
        },
        "product_code": {
          "type": "string"
        },
        "user_id": {
          "type": "integer"
        },
        "product_amount": {
          "type": "integer"
        },
        "sell_price": {
          "type": "integer"
        },
        "subtotal_price": {
          "type": "string"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "FilterPurchaseResponse": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/FilterPurchase"
        },
        "meta": {
          "$ref": "#/definitions/Pagination"
        }
      },
      "required": [
        "data"
      ]
    },
    "FilterPurchase": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "order_id": {
            "type": "integer"
          },
          "product_code": {
            "type": "string"
          },
          "product_name": {
            "type": "string"
          },
          "supplier_name": {
            "type": "string"
          },
          "product_amount": {
            "type": "integer"
          },
          "buy_price": {
            "type": "integer"
          },
          "subtotal_price": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      }
    },
    "FilterSalesResponse": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/FilterSales"
        },
        "meta": {
          "$ref": "#/definitions/Pagination"
        }
      },
      "required": [
        "data"
      ]
    },
    "FilterSales": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "sales_id": {
            "type": "integer"
          },
          "product_code": {
            "type": "string"
          },
          "product_name": {
            "type": "string"
          },
          "customer_name": {
            "type": "string"
          },
          "product_amount": {
            "type": "integer"
          },
          "sell_price": {
            "type": "integer"
          },
          "subtotal_price": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      }
    },
    "FilterStockResponse": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/FilterStock"
        },
        "meta": {
          "$ref": "#/definitions/Pagination"
        }
      },
      "required": [
        "data"
      ]
    },
    "FilterStock": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "product_code": {
            "type": "string"
          },
          "product_name": {
            "type": "string"
          },
          "unit": {
            "type": "string"
          },
          "buy_price": {
            "type": "string"
          },
          "sell_price": {
            "type": "string"
          },
          "total_stock": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      }
    },
    "FilterMutationResponse": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/FilterMutation"
        },
        "meta": {
          "$ref": "#/definitions/Pagination"
        }
      },
      "required": [
        "data"
      ]
    },
    "FilterMutation": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "product_code": {
            "type": "string"
          },
          "product_name": {
            "type": "string"
          },
          "first_stock": {
            "type": "integer"
          },
          "stock_in": {
            "type": "integer"
          },
          "stock_out": {
            "type": "integer"
          },
          "total_stock": {
            "type": "string"
          },
          "first_balance": {
            "type": "integer"
          },
          "value_in": {
            "type": "integer"
          },
          "value_out": {
            "type": "integer"
          },
          "total_balance": {
            "type": "integer"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      }
    },
    "CitiesResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer"
              },
              "name": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "Pagination": {
      "type": "object",
      "properties": {
        "pagination": {
          "properties": {
            "total": {
              "type": "integer"
            },
            "count": {
              "type": "integer"
            },
            "per_page": {
              "type": "integer"
            },
            "current_page": {
              "type": "integer"
            },
            "total_pages": {
              "type": "integer"
            },
            "links": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "ProfileResponse": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/Profile"
        }
      },
      "required": [
        "profile"
      ]
    },
    "Profile": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "address": {
          "type": "string"
        },
        "phone_number": {
          "type": "string"
        },
        "photo": {
          "type": "string"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "name",
        "username",
        "email",
        "address",
        "phone_number",
        "photo"
      ]
    },
    "GenericErrorModel": {
      "type": "object",
      "properties": {
        "key": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "key"
      ]
    }
  }
}